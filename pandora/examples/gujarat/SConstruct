nameProgram = 'gujarat'

agents = ['HunterGatherer','AgroPastoralist']
namespaceAgents = ['Gujarat','Gujarat']
parents = ['GujaratAgent', 'GujaratAgent']

srcFiles = Split("""
main.cxx GujaratWorld.cxx GujaratConfig.cxx 
Climate.cxx GujaratAgent.cxx AgroPastoralist.cxx 
HunterGatherer.cxx MDPAction.cxx MoveHomeAction.cxx 
CultivatedField.cxx Sector.cxx ForageAction.cxx 
SettlementAreas.cxx HunterGathererMDPConfig.cxx 
HunterGathererMDPState.cxx HunterGathererMDPModel.cxx DoNothingAction.cxx 
AgentController.cxx HunterGathererProgrammedController.cxx HunterGathererDecisionTreeController.cxx 
HunterGathererMDPController.cxx GujaratDemographics.cxx OriginalDemographics.cxx 
RamirezDemographics.cxx CaloricRequirementsTable.cxx AgentInitializer.cxx
FixedAgentInitializer.cxx EstablishPlotAction.cxx SowAction.cxx HarvestAction.cxx MaintainPlotAction.cxx APMoveHomeAction.cxx""" )


import os, sys
from subprocess import call

sys.path.append('../../scripts/')
import generateMpi 

release = ARGUMENTS.get('release', 1)
mareNostrum = ARGUMENTS.get('mn', 0)
localmpich = ARGUMENTS.get('localmpich',0)

if int(localmpich) == 1 :
	env = Environment(ENV=os.environ, CXX='/usr/local/bin/mpicxx')
else :
	env = Environment(ENV=os.environ, CXX='mpicxx')
	
generateMPICodeBuilder = Builder(action=generateMpi.execute)
env.Append( BUILDERS = {'GenerateMPICode' : generateMPICodeBuilder})

if int(mareNostrum) == 1:
	env['CXX'] = '/opt/osshpc/mpich-mx/64/bin/mpicxx'
else:
	if int(localmpich) == 1 :
		env['CXX'] = '/usr/local/bin/mpicxx'
	else :
		env['CXX'] = 'mpicxx'

if int(release) == 0:
	env['CCFLAGS'] = Split('-g -O0 -Wall -DTIXML_USE_STL')
	libs = Split('pthread mpich pandorad gdal hdf5 tinyxml grass_gis grass_datetime')
	linkFlags = Split('')
else:
	env['CCFLAGS'] = Split('-O3 -DTIXML_USE_STL -fopenmp')
	libs = Split('pthread mpich pandora gdal hdf5 tinyxml grass_gis grass_datetime')
	linkFlags = Split('-fopenmp')


includeDirs = Split('./ ../../')

if int(mareNostrum)==1:
	libDirs = Split('../../ /gpfs/apps/HDF5/1.6.5/lib /gpfs/apps/GDAL/1.7.1/64/lib /opt/ibmcmp/vacpp/10.1/lib64/ /gpfs/apps/TINYXML/2.6.2/64/')  
	includeDirs += ['/gpfs/apps/HDF5/1.6.5/include']
	includeDirs += ['/gpfs/apps/GDAL/1.7.1/64/include']
	includeDirs += ['/gpfs/apps/BOOST/1_39_0/64/include/boost-1_39/']
	includeDirs += ['/gpfs/apps/TINYXML/2.6.2/64/']
	libs += ['gpfs']
	libs += ['z']
	libs += ['xl']
else:
	libDirs = Split('../../ /usr/local/lib/ /usr/local/hdf5/lib/') 
	includeDirs += ['/usr/local/include/', '../../../libs/libmdp','/usr/local/hdf5/include']
        libDirs += ['/usr/lib/grass64/lib/']
# if debug && mare nostrum mpitrace is added
if int(release)==0 and int(mareNostrum)==1:
	libs += ['mpitrace']
	libDirs += ['/gpfs/apps/CEPBATOOLS/mpitrace-stable-1.2-mx/lib']

# add the list of mpi code that must be generated & compiled
mpiAgentsSrc = ['mpiCode/FactoryCode.cxx']
agentsSrc = ['main.cxx']
for agent in agents:	
	if agent != '':
		agentsSrc.append(agent+".cxx")
		mpiAgentsSrc.append("mpiCode/"+agent+"_mpi.cxx")
env['namespaces'] = namespaceAgents
env['parents'] = parents
env.GenerateMPICode( target=mpiAgentsSrc, source=agentsSrc)
env.Program(nameProgram, srcFiles+mpiAgentsSrc, CPPPATH=includeDirs, LIBS=libs, LIBPATH=libDirs, LINKFLAGS=linkFlags)
