.TH "QwtPlotIntervalCurve" 3 "Fri Apr 15 2011" "Version 6.0.0" "Qwt User's Guide" \" -*- nroff -*-
.ad l
.nh
.SH NAME
QwtPlotIntervalCurve \- 
.PP
\fBQwtPlotIntervalCurve\fP represents a series of samples, where each value is associated with an interval ( $[y1,y2] = f(x)$ ).  

.SH SYNOPSIS
.br
.PP
.PP
\fC#include <qwt_plot_intervalcurve.h>\fP
.PP
Inherits \fBQwtPlotSeriesItem< QwtIntervalSample >\fP.
.SS "Public Types"

.in +1c
.ti -1c
.RI "enum \fBCurveStyle\fP { \fBNoCurve\fP, \fBTube\fP, \fBUserCurve\fP =  100 }"
.br
.ti -1c
.RI "enum \fBPaintAttribute\fP { \fBClipPolygons\fP =  0x01, \fBClipSymbol\fP =  0x02 }"
.br
.ti -1c
.RI "typedef QFlags< \fBPaintAttribute\fP > \fBPaintAttributes\fP"
.br
.in -1c
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBQwtPlotIntervalCurve\fP (const QString &title=QString::null)"
.br
.ti -1c
.RI "\fBQwtPlotIntervalCurve\fP (const \fBQwtText\fP &title)"
.br
.ti -1c
.RI "virtual \fB~QwtPlotIntervalCurve\fP ()"
.br
.ti -1c
.RI "virtual int \fBrtti\fP () const "
.br
.ti -1c
.RI "void \fBsetPaintAttribute\fP (\fBPaintAttribute\fP, bool on=true)"
.br
.ti -1c
.RI "bool \fBtestPaintAttribute\fP (\fBPaintAttribute\fP) const "
.br
.ti -1c
.RI "void \fBsetSamples\fP (const QVector< \fBQwtIntervalSample\fP > &)"
.br
.ti -1c
.RI "void \fBsetPen\fP (const QPen &)"
.br
.ti -1c
.RI "const QPen & \fBpen\fP () const "
.br
.ti -1c
.RI "void \fBsetBrush\fP (const QBrush &)"
.br
.ti -1c
.RI "const QBrush & \fBbrush\fP () const "
.br
.ti -1c
.RI "void \fBsetStyle\fP (\fBCurveStyle\fP style)"
.br
.ti -1c
.RI "\fBCurveStyle\fP \fBstyle\fP () const "
.br
.ti -1c
.RI "void \fBsetSymbol\fP (const \fBQwtIntervalSymbol\fP *)"
.br
.ti -1c
.RI "const \fBQwtIntervalSymbol\fP * \fBsymbol\fP () const "
.br
.ti -1c
.RI "virtual void \fBdrawSeries\fP (QPainter *p, const \fBQwtScaleMap\fP &xMap, const \fBQwtScaleMap\fP &yMap, const QRectF &canvasRect, int from, int to) const "
.br
.ti -1c
.RI "virtual QRectF \fBboundingRect\fP () const "
.br
.ti -1c
.RI "virtual void \fBdrawLegendIdentifier\fP (QPainter *, const QRectF &) const "
.br
.in -1c
.SS "Protected Member Functions"

.in +1c
.ti -1c
.RI "void \fBinit\fP ()"
.br
.ti -1c
.RI "virtual void \fBdrawTube\fP (QPainter *, const \fBQwtScaleMap\fP &xMap, const \fBQwtScaleMap\fP &yMap, const QRectF &canvasRect, int from, int to) const "
.br
.ti -1c
.RI "virtual void \fBdrawSymbols\fP (QPainter *, const \fBQwtIntervalSymbol\fP &, const \fBQwtScaleMap\fP &xMap, const \fBQwtScaleMap\fP &yMap, const QRectF &canvasRect, int from, int to) const "
.br
.in -1c
.SH "Detailed Description"
.PP 
\fBQwtPlotIntervalCurve\fP represents a series of samples, where each value is associated with an interval ( $[y1,y2] = f(x)$ ). 

The representation depends on the \fBstyle()\fP and an optional \fBsymbol()\fP that is displayed for each interval. \fBQwtPlotIntervalCurve\fP might be used to disply error bars or the area between 2 curves. 
.SH "Member Typedef Documentation"
.PP 
.SS "typedef QFlags<\fBPaintAttribute\fP> \fBQwtPlotIntervalCurve::PaintAttributes\fP"
.PP
Paint attributes. 
.SH "Member Enumeration Documentation"
.PP 
.SS "enum \fBQwtPlotIntervalCurve::CurveStyle\fP"
.PP
Curve styles. The default setting is \fBQwtPlotIntervalCurve::Tube\fP. \fBSee also:\fP
.RS 4
\fBsetStyle()\fP, \fBstyle()\fP 
.RE
.PP

.PP
\fBEnumerator: \fP
.in +1c
.TP
\fB\fINoCurve \fP\fP
Don't draw a curve. Note: This doesn't affect the symbols. 
.TP
\fB\fITube \fP\fP
Build 2 curves from the upper and lower limits of the intervals and draw them with the \fBpen()\fP. The area between the curves is filled with the \fBbrush()\fP. 
.TP
\fB\fIUserCurve \fP\fP
Styles >= \fBQwtPlotIntervalCurve::UserCurve\fP are reserved for derived classes that overload \fBdrawSeries()\fP with additional application specific curve types. 
.SS "enum \fBQwtPlotIntervalCurve::PaintAttribute\fP"Attributes to modify the drawing algorithm. 
.PP
\fBSee also:\fP
.RS 4
\fBsetPaintAttribute()\fP, \fBtestPaintAttribute()\fP 
.RE
.PP

.PP
\fBEnumerator: \fP
.in +1c
.TP
\fB\fIClipPolygons \fP\fP
Clip polygons before painting them. In situations, where points are far outside the visible area (f.e when zooming deep) this might be a substantial improvement for the painting performance. 
.TP
\fB\fIClipSymbol \fP\fP
Check if a symbol is on the plot canvas before painting it. 
.SH "Constructor & Destructor Documentation"
.PP 
.SS "QwtPlotIntervalCurve::QwtPlotIntervalCurve (const QString &title = \fCQString::null\fP)\fC [explicit]\fP"Constructor 
.PP
\fBParameters:\fP
.RS 4
\fItitle\fP Title of the curve 
.RE
.PP

.SS "QwtPlotIntervalCurve::QwtPlotIntervalCurve (const \fBQwtText\fP &title)\fC [explicit]\fP"Constructor 
.PP
\fBParameters:\fP
.RS 4
\fItitle\fP Title of the curve 
.RE
.PP

.SS "QwtPlotIntervalCurve::~QwtPlotIntervalCurve ()\fC [virtual]\fP"
.PP
Destructor. 
.SH "Member Function Documentation"
.PP 
.SS "QRectF QwtPlotIntervalCurve::boundingRect () const\fC [virtual]\fP"\fBReturns:\fP
.RS 4
Bounding rectangle of all samples. For an empty series the rectangle is invalid. 
.RE
.PP

.PP
Reimplemented from \fBQwtPlotSeriesItem< QwtIntervalSample >\fP.
.SS "const QBrush & QwtPlotIntervalCurve::brush () const"\fBReturns:\fP
.RS 4
Brush used to fill the area in Tube \fBstyle()\fP 
.RE
.PP
\fBSee also:\fP
.RS 4
\fBsetBrush()\fP, \fBsetStyle()\fP, \fBCurveStyle\fP 
.RE
.PP

.SS "void QwtPlotIntervalCurve::drawLegendIdentifier (QPainter *painter, const QRectF &rect) const\fC [virtual]\fP"In case of Tibe stale() a plain rectangle is painted without a pen filled the \fBbrush()\fP. If a symbol is assigned it is painted cebtered into rect.
.PP
\fBParameters:\fP
.RS 4
\fIpainter\fP Painter 
.br
\fIrect\fP Bounding rectangle for the identifier 
.RE
.PP

.PP
Reimplemented from \fBQwtLegendItemManager\fP.
.SS "void QwtPlotIntervalCurve::drawSeries (QPainter *painter, const \fBQwtScaleMap\fP &xMap, const \fBQwtScaleMap\fP &yMap, const QRectF &canvasRect, intfrom, intto) const\fC [virtual]\fP"Draw a subset of the samples
.PP
\fBParameters:\fP
.RS 4
\fIpainter\fP Painter 
.br
\fIxMap\fP Maps x-values into pixel coordinates. 
.br
\fIyMap\fP Maps y-values into pixel coordinates. 
.br
\fIcanvasRect\fP Contents rect of the canvas 
.br
\fIfrom\fP Index of the first sample to be painted 
.br
\fIto\fP Index of the last sample to be painted. If to < 0 the series will be painted to its last sample.
.RE
.PP
\fBSee also:\fP
.RS 4
\fBdrawTube()\fP, \fBdrawSymbols()\fP 
.RE
.PP

.PP
Implements \fBQwtPlotAbstractSeriesItem\fP.
.SS "void QwtPlotIntervalCurve::drawSymbols (QPainter *painter, const \fBQwtIntervalSymbol\fP &symbol, const \fBQwtScaleMap\fP &xMap, const \fBQwtScaleMap\fP &yMap, const QRectF &canvasRect, intfrom, intto) const\fC [protected, virtual]\fP"Draw symbols for a subset of the samples
.PP
\fBParameters:\fP
.RS 4
\fIpainter\fP Painter 
.br
\fIsymbol\fP Interval symbol 
.br
\fIxMap\fP x map 
.br
\fIyMap\fP y map 
.br
\fIcanvasRect\fP Contents rect of the canvas 
.br
\fIfrom\fP Index of the first sample to be painted 
.br
\fIto\fP Index of the last sample to be painted
.RE
.PP
\fBSee also:\fP
.RS 4
\fBsetSymbol()\fP, \fBdrawSeries()\fP, \fBdrawTube()\fP 
.RE
.PP

.SS "void QwtPlotIntervalCurve::drawTube (QPainter *painter, const \fBQwtScaleMap\fP &xMap, const \fBQwtScaleMap\fP &yMap, const QRectF &canvasRect, intfrom, intto) const\fC [protected, virtual]\fP"Draw a tube
.PP
Builds 2 curves from the upper and lower limits of the intervals and draws them with the \fBpen()\fP. The area between the curves is filled with the \fBbrush()\fP.
.PP
\fBParameters:\fP
.RS 4
\fIpainter\fP Painter 
.br
\fIxMap\fP Maps x-values into pixel coordinates. 
.br
\fIyMap\fP Maps y-values into pixel coordinates. 
.br
\fIcanvasRect\fP Contents rect of the canvas 
.br
\fIfrom\fP Index of the first sample to be painted 
.br
\fIto\fP Index of the last sample to be painted. If to < 0 the series will be painted to its last sample.
.RE
.PP
\fBSee also:\fP
.RS 4
\fBdrawSeries()\fP, \fBdrawSymbols()\fP 
.RE
.PP

.SS "void QwtPlotIntervalCurve::init ()\fC [protected]\fP"
.PP
Initialize internal members. 
.SS "const QPen & QwtPlotIntervalCurve::pen () const"
.PP
Return the pen used to draw the lines. \fBSee also:\fP
.RS 4
\fBsetPen()\fP, \fBbrush()\fP 
.RE
.PP

.SS "int QwtPlotIntervalCurve::rtti () const\fC [virtual]\fP"\fBReturns:\fP
.RS 4
QwtPlotItem::Rtti_PlotIntervalCurve 
.RE
.PP

.PP
Reimplemented from \fBQwtPlotItem\fP.
.SS "void QwtPlotIntervalCurve::setBrush (const QBrush &brush)"Assign a brush.
.PP
The brush is used to fill the area in Tube \fBstyle()\fP.
.PP
\fBParameters:\fP
.RS 4
\fIbrush\fP Brush 
.RE
.PP
\fBSee also:\fP
.RS 4
\fBbrush()\fP, \fBpen()\fP, \fBsetStyle()\fP, \fBCurveStyle\fP 
.RE
.PP

.SS "void QwtPlotIntervalCurve::setPaintAttribute (\fBPaintAttribute\fPattribute, boolon = \fCtrue\fP)"Specify an attribute how to draw the curve
.PP
\fBParameters:\fP
.RS 4
\fIattribute\fP Paint attribute 
.br
\fIon\fP On/Off 
.RE
.PP
\fBSee also:\fP
.RS 4
\fBtestPaintAttribute()\fP 
.RE
.PP

.SS "void QwtPlotIntervalCurve::setPen (const QPen &pen)"
.PP
Assign a pen. \fBParameters:\fP
.RS 4
\fIpen\fP New pen 
.RE
.PP
\fBSee also:\fP
.RS 4
\fBpen()\fP, \fBbrush()\fP 
.RE
.PP

.SS "void QwtPlotIntervalCurve::setSamples (const QVector< \fBQwtIntervalSample\fP > &samples)"Initialize data with an array of samples. 
.PP
\fBParameters:\fP
.RS 4
\fIsamples\fP Vector of samples 
.RE
.PP

.SS "void QwtPlotIntervalCurve::setStyle (\fBCurveStyle\fPstyle)"Set the curve's drawing style
.PP
\fBParameters:\fP
.RS 4
\fIstyle\fP Curve style 
.RE
.PP
\fBSee also:\fP
.RS 4
\fBCurveStyle\fP, \fBstyle()\fP 
.RE
.PP

.SS "void QwtPlotIntervalCurve::setSymbol (const \fBQwtIntervalSymbol\fP *symbol)"Assign a symbol.
.PP
\fBParameters:\fP
.RS 4
\fIsymbol\fP Symbol 
.RE
.PP
\fBSee also:\fP
.RS 4
\fBsymbol()\fP 
.RE
.PP

.SS "\fBQwtPlotIntervalCurve::CurveStyle\fP QwtPlotIntervalCurve::style () const"
.PP
Return the current style. \fBSee also:\fP
.RS 4
\fBsetStyle()\fP 
.RE
.PP

.SS "const \fBQwtIntervalSymbol\fP * QwtPlotIntervalCurve::symbol () const"\fBReturns:\fP
.RS 4
Current symbol or NULL, when no symbol has been assigned 
.RE
.PP
\fBSee also:\fP
.RS 4
\fBsetSymbol()\fP 
.RE
.PP

.SS "bool QwtPlotIntervalCurve::testPaintAttribute (\fBPaintAttribute\fPattribute) const"
.PP
Return the current paint attributes. \fBSee also:\fP
.RS 4
\fBPaintAttribute\fP, \fBsetPaintAttribute()\fP 
.RE
.PP


.SH "Author"
.PP 
Generated automatically by Doxygen for Qwt User's Guide from the source code.
