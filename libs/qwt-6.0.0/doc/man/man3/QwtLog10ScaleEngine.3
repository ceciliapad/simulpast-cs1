.TH "QwtLog10ScaleEngine" 3 "Fri Apr 15 2011" "Version 6.0.0" "Qwt User's Guide" \" -*- nroff -*-
.ad l
.nh
.SH NAME
QwtLog10ScaleEngine \- 
.PP
A scale engine for logarithmic (base 10) scales.  

.SH SYNOPSIS
.br
.PP
.PP
\fC#include <qwt_scale_engine.h>\fP
.PP
Inherits \fBQwtScaleEngine\fP.
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "virtual void \fBautoScale\fP (int maxSteps, double &x1, double &x2, double &stepSize) const "
.br
.ti -1c
.RI "virtual \fBQwtScaleDiv\fP \fBdivideScale\fP (double x1, double x2, int numMajorSteps, int numMinorSteps, double stepSize=0.0) const "
.br
.ti -1c
.RI "virtual \fBQwtScaleTransformation\fP * \fBtransformation\fP () const "
.br
.in -1c
.SS "Protected Member Functions"

.in +1c
.ti -1c
.RI "\fBQwtInterval\fP \fBlog10\fP (const \fBQwtInterval\fP &) const "
.br
.ti -1c
.RI "\fBQwtInterval\fP \fBpow10\fP (const \fBQwtInterval\fP &) const "
.br
.ti -1c
.RI "\fBQwtInterval\fP \fBalign\fP (const \fBQwtInterval\fP &, double stepSize) const "
.br
.ti -1c
.RI "void \fBbuildTicks\fP (const \fBQwtInterval\fP &, double stepSize, int maxMinSteps, QList< double > ticks[QwtScaleDiv::NTickTypes]) const "
.br
.ti -1c
.RI "QList< double > \fBbuildMajorTicks\fP (const \fBQwtInterval\fP &interval, double stepSize) const "
.br
.ti -1c
.RI "QList< double > \fBbuildMinorTicks\fP (const QList< double > &majorTicks, int maxMinMark, double step) const "
.br
.in -1c
.SH "Detailed Description"
.PP 
A scale engine for logarithmic (base 10) scales. 

The step size is measured in *decades* and the major step size will be adjusted to fit the pattern $\left\{ 1,2,3,5\right\} \cdot 10^{n}$, where n is a natural number including zero.
.PP
\fBWarning:\fP
.RS 4
the step size as well as the margins are measured in *decades*. 
.RE
.PP

.SH "Member Function Documentation"
.PP 
.SS "\fBQwtInterval\fP QwtLog10ScaleEngine::align (const \fBQwtInterval\fP &interval, doublestepSize) const\fC [protected]\fP"
.PP
Align an interval to a step size. The limits of an interval are aligned that both are integer multiples of the step size.
.PP
\fBParameters:\fP
.RS 4
\fIinterval\fP Interval 
.br
\fIstepSize\fP Step size
.RE
.PP
\fBReturns:\fP
.RS 4
Aligned interval 
.RE
.PP

.SS "void QwtLog10ScaleEngine::autoScale (intmaxNumSteps, double &x1, double &x2, double &stepSize) const\fC [virtual]\fP"Align and divide an interval
.PP
\fBParameters:\fP
.RS 4
\fImaxNumSteps\fP Max. number of steps 
.br
\fIx1\fP First limit of the interval (In/Out) 
.br
\fIx2\fP Second limit of the interval (In/Out) 
.br
\fIstepSize\fP Step size (Out)
.RE
.PP
\fBSee also:\fP
.RS 4
\fBQwtScaleEngine::setAttribute()\fP 
.RE
.PP

.PP
Implements \fBQwtScaleEngine\fP.
.SS "QList< double > QwtLog10ScaleEngine::buildMajorTicks (const \fBQwtInterval\fP &interval, doublestepSize) const\fC [protected]\fP"
.PP
Calculate major ticks for an interval. \fBParameters:\fP
.RS 4
\fIinterval\fP Interval 
.br
\fIstepSize\fP Step size
.RE
.PP
\fBReturns:\fP
.RS 4
Calculated ticks 
.RE
.PP

.SS "QList< double > QwtLog10ScaleEngine::buildMinorTicks (const QList< double > &majorTicks, intmaxMinSteps, doublestepSize) const\fC [protected]\fP"
.PP
Calculate minor/medium ticks for major ticks. \fBParameters:\fP
.RS 4
\fImajorTicks\fP Major ticks 
.br
\fImaxMinSteps\fP Maximum number of minor steps 
.br
\fIstepSize\fP Step size 
.RE
.PP

.SS "void QwtLog10ScaleEngine::buildTicks (const \fBQwtInterval\fP &interval, doublestepSize, intmaxMinSteps, QList< double >ticks[QwtScaleDiv::NTickTypes]) const\fC [protected]\fP"
.PP
Calculate ticks for an interval. \fBParameters:\fP
.RS 4
\fIinterval\fP Interval 
.br
\fImaxMinSteps\fP Maximum number of minor steps 
.br
\fIstepSize\fP Step size 
.br
\fIticks\fP Arrays to be filled with the calculated ticks
.RE
.PP
\fBSee also:\fP
.RS 4
\fBbuildMajorTicks()\fP, \fBbuildMinorTicks\fP 
.RE
.PP

.SS "\fBQwtScaleDiv\fP QwtLog10ScaleEngine::divideScale (doublex1, doublex2, intmaxMajSteps, intmaxMinSteps, doublestepSize = \fC0.0\fP) const\fC [virtual]\fP"
.PP
Calculate a scale division. \fBParameters:\fP
.RS 4
\fIx1\fP First interval limit 
.br
\fIx2\fP Second interval limit 
.br
\fImaxMajSteps\fP Maximum for the number of major steps 
.br
\fImaxMinSteps\fP Maximum number of minor steps 
.br
\fIstepSize\fP Step size. If stepSize == 0, the scaleEngine calculates one.
.RE
.PP
\fBSee also:\fP
.RS 4
QwtScaleEngine::stepSize(), QwtLog10ScaleEngine::subDivide() 
.RE
.PP

.PP
Implements \fBQwtScaleEngine\fP.
.SS "\fBQwtInterval\fP QwtLog10ScaleEngine::log10 (const \fBQwtInterval\fP &interval) const\fC [protected]\fP"Return the interval [log10(interval.minValue(), log10(interval.maxValue] 
.SS "\fBQwtInterval\fP QwtLog10ScaleEngine::pow10 (const \fBQwtInterval\fP &interval) const\fC [protected]\fP"Return the interval [pow10(interval.minValue(), pow10(interval.maxValue] 
.SS "\fBQwtScaleTransformation\fP * QwtLog10ScaleEngine::transformation () const\fC [virtual]\fP"Return a transformation, for logarithmic (base 10) scales 
.PP
Implements \fBQwtScaleEngine\fP.

.SH "Author"
.PP 
Generated automatically by Doxygen for Qwt User's Guide from the source code.
