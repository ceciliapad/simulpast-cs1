.TH "QwtLinearScaleEngine" 3 "Fri Apr 15 2011" "Version 6.0.0" "Qwt User's Guide" \" -*- nroff -*-
.ad l
.nh
.SH NAME
QwtLinearScaleEngine \- 
.PP
A scale engine for linear scales.  

.SH SYNOPSIS
.br
.PP
.PP
\fC#include <qwt_scale_engine.h>\fP
.PP
Inherits \fBQwtScaleEngine\fP.
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "virtual void \fBautoScale\fP (int maxSteps, double &x1, double &x2, double &stepSize) const "
.br
.ti -1c
.RI "virtual \fBQwtScaleDiv\fP \fBdivideScale\fP (double x1, double x2, int numMajorSteps, int numMinorSteps, double stepSize=0.0) const "
.br
.ti -1c
.RI "virtual \fBQwtScaleTransformation\fP * \fBtransformation\fP () const "
.br
.in -1c
.SS "Protected Member Functions"

.in +1c
.ti -1c
.RI "\fBQwtInterval\fP \fBalign\fP (const \fBQwtInterval\fP &, double stepSize) const "
.br
.ti -1c
.RI "void \fBbuildTicks\fP (const \fBQwtInterval\fP &, double stepSize, int maxMinSteps, QList< double > ticks[QwtScaleDiv::NTickTypes]) const "
.br
.ti -1c
.RI "QList< double > \fBbuildMajorTicks\fP (const \fBQwtInterval\fP &interval, double stepSize) const "
.br
.ti -1c
.RI "void \fBbuildMinorTicks\fP (const QList< double > &majorTicks, int maxMinMark, double step, QList< double > &, QList< double > &) const "
.br
.in -1c
.SH "Detailed Description"
.PP 
A scale engine for linear scales. 

The step size will fit into the pattern $\left\{ 1,2,5\right\} \cdot 10^{n}$, where n is an integer. 
.SH "Member Function Documentation"
.PP 
.SS "\fBQwtInterval\fP QwtLinearScaleEngine::align (const \fBQwtInterval\fP &interval, doublestepSize) const\fC [protected]\fP"
.PP
Align an interval to a step size. The limits of an interval are aligned that both are integer multiples of the step size.
.PP
\fBParameters:\fP
.RS 4
\fIinterval\fP Interval 
.br
\fIstepSize\fP Step size
.RE
.PP
\fBReturns:\fP
.RS 4
Aligned interval 
.RE
.PP

.SS "void QwtLinearScaleEngine::autoScale (intmaxNumSteps, double &x1, double &x2, double &stepSize) const\fC [virtual]\fP"Align and divide an interval
.PP
\fBParameters:\fP
.RS 4
\fImaxNumSteps\fP Max. number of steps 
.br
\fIx1\fP First limit of the interval (In/Out) 
.br
\fIx2\fP Second limit of the interval (In/Out) 
.br
\fIstepSize\fP Step size (Out)
.RE
.PP
\fBSee also:\fP
.RS 4
\fBsetAttribute()\fP 
.RE
.PP

.PP
Implements \fBQwtScaleEngine\fP.
.SS "QList< double > QwtLinearScaleEngine::buildMajorTicks (const \fBQwtInterval\fP &interval, doublestepSize) const\fC [protected]\fP"
.PP
Calculate major ticks for an interval. \fBParameters:\fP
.RS 4
\fIinterval\fP Interval 
.br
\fIstepSize\fP Step size
.RE
.PP
\fBReturns:\fP
.RS 4
Calculated ticks 
.RE
.PP

.SS "void QwtLinearScaleEngine::buildMinorTicks (const QList< double > &majorTicks, intmaxMinSteps, doublestepSize, QList< double > &minorTicks, QList< double > &mediumTicks) const\fC [protected]\fP"
.PP
Calculate minor/medium ticks for major ticks. \fBParameters:\fP
.RS 4
\fImajorTicks\fP Major ticks 
.br
\fImaxMinSteps\fP Maximum number of minor steps 
.br
\fIstepSize\fP Step size 
.br
\fIminorTicks\fP Array to be filled with the calculated minor ticks 
.br
\fImediumTicks\fP Array to be filled with the calculated medium ticks 
.RE
.PP

.SS "void QwtLinearScaleEngine::buildTicks (const \fBQwtInterval\fP &interval, doublestepSize, intmaxMinSteps, QList< double >ticks[QwtScaleDiv::NTickTypes]) const\fC [protected]\fP"
.PP
Calculate ticks for an interval. \fBParameters:\fP
.RS 4
\fIinterval\fP Interval 
.br
\fIstepSize\fP Step size 
.br
\fImaxMinSteps\fP Maximum number of minor steps 
.br
\fIticks\fP Arrays to be filled with the calculated ticks
.RE
.PP
\fBSee also:\fP
.RS 4
\fBbuildMajorTicks()\fP, \fBbuildMinorTicks\fP 
.RE
.PP

.SS "\fBQwtScaleDiv\fP QwtLinearScaleEngine::divideScale (doublex1, doublex2, intmaxMajSteps, intmaxMinSteps, doublestepSize = \fC0.0\fP) const\fC [virtual]\fP"
.PP
Calculate a scale division. \fBParameters:\fP
.RS 4
\fIx1\fP First interval limit 
.br
\fIx2\fP Second interval limit 
.br
\fImaxMajSteps\fP Maximum for the number of major steps 
.br
\fImaxMinSteps\fP Maximum number of minor steps 
.br
\fIstepSize\fP Step size. If stepSize == 0, the scaleEngine calculates one.
.RE
.PP
\fBSee also:\fP
.RS 4
QwtScaleEngine::stepSize(), QwtScaleEngine::subDivide() 
.RE
.PP

.PP
Implements \fBQwtScaleEngine\fP.
.SS "\fBQwtScaleTransformation\fP * QwtLinearScaleEngine::transformation () const\fC [virtual]\fP"Return a transformation, for linear scales 
.PP
Implements \fBQwtScaleEngine\fP.

.SH "Author"
.PP 
Generated automatically by Doxygen for Qwt User's Guide from the source code.
