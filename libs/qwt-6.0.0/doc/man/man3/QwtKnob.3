.TH "QwtKnob" 3 "Fri Apr 15 2011" "Version 6.0.0" "Qwt User's Guide" \" -*- nroff -*-
.ad l
.nh
.SH NAME
QwtKnob \- 
.PP
The Knob Widget.  

.SH SYNOPSIS
.br
.PP
.PP
\fC#include <qwt_knob.h>\fP
.PP
Inherits \fBQwtAbstractSlider\fP, and \fBQwtAbstractScale\fP.
.SS "Public Types"

.in +1c
.ti -1c
.RI "enum \fBKnobStyle\fP { \fBNoStyle\fP =  -1, \fBRaised\fP, \fBSunken\fP }"
.br
.ti -1c
.RI "enum \fBMarkerStyle\fP { \fBNoMarker\fP =  -1, \fBTick\fP, \fBDot\fP, \fBNub\fP, \fBNotch\fP }"
.br
.in -1c
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBQwtKnob\fP (QWidget *parent=NULL)"
.br
.ti -1c
.RI "virtual \fB~QwtKnob\fP ()"
.br
.ti -1c
.RI "void \fBsetKnobWidth\fP (int w)"
.br
.ti -1c
.RI "int \fBknobWidth\fP () const "
.br
.ti -1c
.RI "void \fBsetTotalAngle\fP (double angle)"
.br
.ti -1c
.RI "double \fBtotalAngle\fP () const "
.br
.ti -1c
.RI "void \fBsetKnobStyle\fP (\fBKnobStyle\fP)"
.br
.ti -1c
.RI "\fBKnobStyle\fP \fBknobStyle\fP () const "
.br
.ti -1c
.RI "void \fBsetBorderWidth\fP (int bw)"
.br
.ti -1c
.RI "int \fBborderWidth\fP () const "
.br
.ti -1c
.RI "void \fBsetMarkerStyle\fP (\fBMarkerStyle\fP)"
.br
.ti -1c
.RI "\fBMarkerStyle\fP \fBmarkerStyle\fP () const "
.br
.ti -1c
.RI "void \fBsetMarkerSize\fP (int)"
.br
.ti -1c
.RI "int \fBmarkerSize\fP () const "
.br
.ti -1c
.RI "virtual QSize \fBsizeHint\fP () const "
.br
.ti -1c
.RI "virtual QSize \fBminimumSizeHint\fP () const "
.br
.ti -1c
.RI "void \fBsetScaleDraw\fP (\fBQwtRoundScaleDraw\fP *)"
.br
.ti -1c
.RI "const \fBQwtRoundScaleDraw\fP * \fBscaleDraw\fP () const "
.br
.ti -1c
.RI "\fBQwtRoundScaleDraw\fP * \fBscaleDraw\fP ()"
.br
.in -1c
.SS "Protected Member Functions"

.in +1c
.ti -1c
.RI "virtual void \fBpaintEvent\fP (QPaintEvent *)"
.br
.ti -1c
.RI "virtual void \fBresizeEvent\fP (QResizeEvent *)"
.br
.ti -1c
.RI "virtual void \fBchangeEvent\fP (QEvent *)"
.br
.ti -1c
.RI "virtual void \fBdrawKnob\fP (QPainter *, const QRectF &) const "
.br
.ti -1c
.RI "virtual void \fBdrawMarker\fP (QPainter *, const QRectF &, double arc) const "
.br
.ti -1c
.RI "virtual double \fBgetValue\fP (const QPoint &p)"
.br
.ti -1c
.RI "virtual void \fBgetScrollMode\fP (const QPoint &, \fBQwtAbstractSlider::ScrollMode\fP &, int &direction) const "
.br
.in -1c
.SH "Detailed Description"
.PP 
The Knob Widget. 

The \fBQwtKnob\fP widget imitates look and behaviour of a volume knob on a radio. It contains a scale around the knob which is set up automatically or can be configured manually (see \fBQwtAbstractScale\fP). Automatic scrolling is enabled when the user presses a mouse button on the scale. For a description of signals, slots and other members, see \fBQwtAbstractSlider\fP.
.PP
 
.PP
\fBSee also:\fP
.RS 4
\fBQwtAbstractSlider\fP and \fBQwtAbstractScale\fP for the descriptions of the inherited members. 
.RE
.PP

.SH "Member Enumeration Documentation"
.PP 
.SS "enum \fBQwtKnob::KnobStyle\fP"
.PP
Style of the knob surface. Depending on the KnobStyle the surface of the knob is filled from the brushes of the widget palette().
.PP
\fBSee also:\fP
.RS 4
\fBsetKnobStyle()\fP, \fBknobStyle()\fP 
.RE
.PP

.PP
\fBEnumerator: \fP
.in +1c
.TP
\fB\fINoStyle \fP\fP
Fill the knob with a brush from QPalette::Button. 
.TP
\fB\fIRaised \fP\fP
Build a gradient from QPalette::Midlight and QPalette::Button. 
.TP
\fB\fISunken \fP\fP
Build a gradient from QPalette::Midlight, QPalette::Button and QPalette::Midlight 
.SS "enum \fBQwtKnob::MarkerStyle\fP"
.PP
Marker type. The marker indicates the current value on the knob The default setting is a Notch marker.
.PP
\fBSee also:\fP
.RS 4
\fBsetMarkerStyle()\fP, \fBsetMarkerSize()\fP 
.RE
.PP

.PP
\fBEnumerator: \fP
.in +1c
.TP
\fB\fINoMarker \fP\fP
Don't paint any marker. 
.TP
\fB\fITick \fP\fP
Paint a single tick in QPalette::ButtonText color. 
.TP
\fB\fIDot \fP\fP
Paint a circle in QPalette::ButtonText color. 
.TP
\fB\fINub \fP\fP
Draw a raised ellipse with a gradient build from QPalette::Light and QPalette::Mid 
.TP
\fB\fINotch \fP\fP
Draw a sunken ellipse with a gradient build from QPalette::Light and QPalette::Mid 
.SH "Constructor & Destructor Documentation"
.PP 
.SS "QwtKnob::QwtKnob (QWidget *parent = \fCNULL\fP)\fC [explicit]\fP"Constructor 
.PP
\fBParameters:\fP
.RS 4
\fIparent\fP Parent widget 
.RE
.PP

.SS "QwtKnob::~QwtKnob ()\fC [virtual]\fP"
.PP
Destructor. 
.SH "Member Function Documentation"
.PP 
.SS "int QwtKnob::borderWidth () const"
.PP
Return the border width. 
.SS "void QwtKnob::changeEvent (QEvent *event)\fC [protected, virtual]\fP"Handle QEvent::StyleChange and QEvent::FontChange; 
.PP
\fBParameters:\fP
.RS 4
\fIevent\fP Change event 
.RE
.PP

.SS "void QwtKnob::drawKnob (QPainter *painter, const QRectF &knobRect) const\fC [protected, virtual]\fP"
.PP
Draw the knob. \fBParameters:\fP
.RS 4
\fIpainter\fP painter 
.br
\fIknobRect\fP Bounding rectangle of the knob (without scale) 
.RE
.PP

.SS "void QwtKnob::drawMarker (QPainter *painter, const QRectF &rect, doubleangle) const\fC [protected, virtual]\fP"
.PP
Draw the marker at the knob's front. \fBParameters:\fP
.RS 4
\fIpainter\fP Painter 
.br
\fIrect\fP Bounding rectangle of the knob without scale 
.br
\fIangle\fP Angle of the marker in degrees 
.RE
.PP

.SS "void QwtKnob::getScrollMode (const QPoint &pos, \fBQwtAbstractSlider::ScrollMode\fP &scrollMode, int &direction) const\fC [protected, virtual]\fP"
.PP
Set the scrolling mode and direction. Called by \fBQwtAbstractSlider\fP 
.PP
\fBParameters:\fP
.RS 4
\fIpos\fP Point in question 
.br
\fIscrollMode\fP Scrolling mode 
.br
\fIdirection\fP Direction 
.RE
.PP

.PP
Implements \fBQwtAbstractSlider\fP.
.SS "double QwtKnob::getValue (const QPoint &pos)\fC [protected, virtual]\fP"
.PP
Determine the value corresponding to a specified position. Called by \fBQwtAbstractSlider\fP 
.PP
\fBParameters:\fP
.RS 4
\fIpos\fP point 
.RE
.PP

.PP
Implements \fBQwtAbstractSlider\fP.
.SS "\fBQwtKnob::KnobStyle\fP QwtKnob::knobStyle () const"\fBReturns:\fP
.RS 4
Marker type of the knob 
.RE
.PP
\fBSee also:\fP
.RS 4
\fBsetKnobStyle()\fP, \fBsetBorderWidth()\fP 
.RE
.PP

.SS "int QwtKnob::knobWidth () const"
.PP
Return the width of the knob. 
.SS "int QwtKnob::markerSize () const"
.PP
Return the marker size. 
.SS "\fBQwtKnob::MarkerStyle\fP QwtKnob::markerStyle () const"\fBReturns:\fP
.RS 4
Marker type of the knob 
.RE
.PP
\fBSee also:\fP
.RS 4
\fBsetMarkerStyle()\fP, \fBsetMarkerSize()\fP 
.RE
.PP

.SS "QSize QwtKnob::minimumSizeHint () const\fC [virtual]\fP"
.PP
Return a minimum size hint. \fBWarning:\fP
.RS 4
The return value of \fBQwtKnob::minimumSizeHint()\fP depends on the font and the scale. 
.RE
.PP

.SS "void QwtKnob::paintEvent (QPaintEvent *event)\fC [protected, virtual]\fP"Repaint the knob 
.PP
\fBParameters:\fP
.RS 4
\fIevent\fP Paint event 
.RE
.PP

.SS "void QwtKnob::resizeEvent (QResizeEvent *event)\fC [protected, virtual]\fP"Qt Resize Event 
.PP
\fBParameters:\fP
.RS 4
\fIevent\fP Resize event 
.RE
.PP

.SS "\fBQwtRoundScaleDraw\fP * QwtKnob::scaleDraw ()"\fBReturns:\fP
.RS 4
the scale draw of the knob 
.RE
.PP
\fBSee also:\fP
.RS 4
\fBsetScaleDraw()\fP 
.RE
.PP

.SS "const \fBQwtRoundScaleDraw\fP * QwtKnob::scaleDraw () const"\fBReturns:\fP
.RS 4
the scale draw of the knob 
.RE
.PP
\fBSee also:\fP
.RS 4
\fBsetScaleDraw()\fP 
.RE
.PP

.SS "void QwtKnob::setBorderWidth (intborderWidth)"
.PP
Set the knob's border width. \fBParameters:\fP
.RS 4
\fIborderWidth\fP new border width 
.RE
.PP

.SS "void QwtKnob::setKnobStyle (\fBKnobStyle\fPknobStyle)"
.PP
Set the knob type. \fBParameters:\fP
.RS 4
\fIknobStyle\fP Knob type 
.RE
.PP
\fBSee also:\fP
.RS 4
\fBknobStyle()\fP, \fBsetBorderWidth()\fP 
.RE
.PP

.SS "void QwtKnob::setKnobWidth (intwidth)"
.PP
Change the knob's width. The specified width must be >= 5, or it will be clipped. 
.PP
\fBParameters:\fP
.RS 4
\fIwidth\fP New width 
.RE
.PP

.SS "void QwtKnob::setMarkerSize (intsize)"
.PP
Set the size of the marker. \fBSee also:\fP
.RS 4
\fBmarkerSize()\fP, \fBmarkerStyle()\fP 
.RE
.PP

.SS "void QwtKnob::setMarkerStyle (\fBMarkerStyle\fPmarkerStyle)"
.PP
Set the marker type of the knob. \fBParameters:\fP
.RS 4
\fImarkerStyle\fP Marker type 
.RE
.PP
\fBSee also:\fP
.RS 4
\fBmarkerStyle()\fP, \fBsetMarkerSize()\fP 
.RE
.PP

.SS "void QwtKnob::setScaleDraw (\fBQwtRoundScaleDraw\fP *scaleDraw)"Change the scale draw of the knob
.PP
For changing the labels of the scales, it is necessary to derive from \fBQwtRoundScaleDraw\fP and overload \fBQwtRoundScaleDraw::label()\fP.
.PP
\fBSee also:\fP
.RS 4
\fBscaleDraw()\fP 
.RE
.PP

.SS "void QwtKnob::setTotalAngle (doubleangle)"
.PP
Set the total angle by which the knob can be turned. \fBParameters:\fP
.RS 4
\fIangle\fP Angle in degrees.
.RE
.PP
The default angle is 270 degrees. It is possible to specify an angle of more than 360 degrees so that the knob can be turned several times around its axis. 
.SS "QSize QwtKnob::sizeHint () const\fC [virtual]\fP"\fBReturns:\fP
.RS 4
\fBminimumSizeHint()\fP 
.RE
.PP

.SS "double QwtKnob::totalAngle () const"
.PP
Return the total angle. 

.SH "Author"
.PP 
Generated automatically by Doxygen for Qwt User's Guide from the source code.
